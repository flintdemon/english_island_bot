package main

import (
	"log"

	"io/ioutil"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api"
	"gopkg.in/yaml.v2"
)

var keyboard = tgbotapi.NewReplyKeyboard(
	tgbotapi.NewKeyboardButtonRow(
		tgbotapi.NewKeyboardButton("üòç –î–∞, —Å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º"),
		tgbotapi.NewKeyboardButton("üôÑ –•–æ—á—É —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ —à–∫–æ–ª–µ"),
	),
)

//Struct used for questions in english level test
type Question struct {
	QuestionText string
	Answers      []string
	RightAnswer  string
	Points       int
}

func (q *Question) getQuestions() *Question {
	yamlFile, err := ioutil.ReadFile("questions.yml")
	if err != nil {
		log.Printf("yamlFile.Get err  #%v ", err)
	}
	err = yaml.Unmarshal(yamlFile, q)
	if err != nil {
		log.Fatalf("Unmarshal: %v", err)
	}
	return q
}

func main() {

	var q Question
	q.getQuestions()
	log.Println(q.QuestionText)

	bot, err := tgbotapi.NewBotAPI("1601846360:AAHPRgAazXY-bX-fZI5NAh0ffUWGbPmH0-I")
	if err != nil {
		log.Panic(err)
	}

	bot.Debug = true

	log.Printf("Authorized on account %s", bot.Self.UserName)

	ucfg := tgbotapi.NewUpdate(0)
	ucfg.Timeout = 60
	updates, err := bot.GetUpdatesChan(ucfg)

	for update := range updates {
		if update.Message == nil {
			continue
		}
		//if !update.Message.IsCommand() { //ignore any non command Messages
		//	continue
		//}

		log.Printf("[%s] %s", update.Message.From.UserName, update.Message.Text)

		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "")

		switch update.Message.Command() {
		case "start":
			msg.Text = "üå¥ –ü—Ä–∏–≤–µ—Ç! –ú—ã —à–∫–æ–ª–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ English Island!\n\nüî• –° –Ω–∞–º–∏ —Ç—ã –∑–∞–≥–æ–≤–æ—Ä–∏—à—å –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —É–∂–µ —Å –ø–µ—Ä–≤–æ–≥–æ –∑–∞–Ω—è—Ç–∏—è –∫–æ—Ç–æ—Ä–æ–µ —Ç—ã –º–æ–∂–µ—à—å –ø–æ—Å–µ—Ç–∏—Ç—å —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ!"
			msg.ReplyMarkup = keyboard
		case "info":
			msg.Text = "–®–∫–æ–ª–∞ –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã—Ö —è–∑—ã–∫–æ–≤\n\nüå¥English Islandüå¥\n\nüî•–≠—Ç–æ —É—é—Ç–Ω–∞—è –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞, —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∏ —É—Ä–æ–∫–∏ —Å –Ω–æ—Å–∏—Ç–µ–ª—è–º–∏ —è–∑—ã–∫–∞.\n\nüî•–ó–∞–±—É–¥—å—Ç–µ –æ –Ω—É–¥–Ω–æ–π –∑—É–±—Ä–µ–∂–∫–µ –∏ —Å–∫—É—á–Ω—ã—Ö –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏—è—Ö.\n\nüî•–ü—Ä–∏—Ö–æ–¥–∏ –∫ –Ω–∞–º –≤\nüå¥English Island Schoolüå¥\n–ò –ø–æ–ª—É—á–∏ –æ–ø—ã—Ç –∂–∏–≤–æ–≥–æ —è–∑—ã–∫–∞, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≥–æ–≤–æ—Ä—è—Ç."
		case "test":
			msg.Text = "–¢—É—Ç –±—É–¥–µ—Ç —Ç–µ—Å—Ç"
		default:
			msg.Text = "–Ø –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã :("
		}

		switch update.Message.Text {
		case "üòç –î–∞, —Å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º":
			msg.Text = "Ok"
		case "üôÑ –•–æ—á—É —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ —à–∫–æ–ª–µ":
			msg.Text = "–®–∫–æ–ª–∞ –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã—Ö —è–∑—ã–∫–æ–≤\n\nüå¥English Islandüå¥\n\nüî•–≠—Ç–æ —É—é—Ç–Ω–∞—è –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞, —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∏ —É—Ä–æ–∫–∏ —Å –Ω–æ—Å–∏—Ç–µ–ª—è–º–∏ —è–∑—ã–∫–∞.\n\nüî•–ó–∞–±—É–¥—å—Ç–µ –æ –Ω—É–¥–Ω–æ–π –∑—É–±—Ä–µ–∂–∫–µ –∏ —Å–∫—É—á–Ω—ã—Ö –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏—è—Ö.\n\nüî•–ü—Ä–∏—Ö–æ–¥–∏ –∫ –Ω–∞–º –≤\nüå¥English Island Schoolüå¥\n–ò –ø–æ–ª—É—á–∏ –æ–ø—ã—Ç –∂–∏–≤–æ–≥–æ —è–∑—ã–∫–∞, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≥–æ–≤–æ—Ä—è—Ç."
		}

		if _, err := bot.Send(msg); err != nil {
			log.Panic(err)
		}
	}
}
