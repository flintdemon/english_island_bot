package main

import (
	"log"

	"io/ioutil"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api"
	"gopkg.in/yaml.v2"
)

const telegramToken string = "1601846360:AAHPRgAazXY-bX-fZI5NAh0ffUWGbPmH0-I"

var startKeyboard = tgbotapi.NewReplyKeyboard(
	tgbotapi.NewKeyboardButtonRow(
		tgbotapi.NewKeyboardButton("üòç –î–∞, —Å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º"),
		tgbotapi.NewKeyboardButton("üôÑ –•–æ—á—É —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ —à–∫–æ–ª–µ"),
	),
)

var startTestKeyboard = tgbotapi.NewReplyKeyboard(
	tgbotapi.NewKeyboardButtonRow(
		tgbotapi.NewKeyboardButton("üòç –î–∞, –¥–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º —Ç–µ—Å—Ç!"),
		tgbotapi.NewKeyboardButton("üôÑ –•–æ—á—É —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ —à–∫–æ–ª–µ"),
	),
)

var endKeyboard = tgbotapi.NewReplyKeyboard(
	tgbotapi.NewKeyboardButtonRow(
		tgbotapi.NewKeyboardButtonContact("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"),
	),
)

type userProfile struct {
	Points          int
	ChatID          int64
	inTest          bool
	currentQuestion int
	levelAfterTest  string
}

type question struct {
	QuestionText string   `yaml:"QuestionText"`
	Answers      []string `yaml:"Answers"`
	RightAnswer  string   `yaml:"RightAnswer"`
	Points       int      `yaml:"Points"`
}

type questionsGroup struct {
	Questions []question `yaml:"Questions"`
}

func userContainsIn(a []userProfile, u userProfile) bool {
	for _, n := range a {
		if u.ChatID == n.ChatID {
			return true
		}
	}
	return false
}

func (q *questionsGroup) getQuestions() *questionsGroup {
	yamlFile, err := ioutil.ReadFile("questions.yml")
	if err != nil {
		log.Printf("yamlFile.Get err  #%v ", err)
	}
	err = yaml.Unmarshal(yamlFile, q)
	if err != nil {
		log.Fatalf("Unmarshal: %v", err)
	}
	return q
}

func getQuestion(chatID int64, questionNumber int) tgbotapi.MessageConfig {

	var questions questionsGroup

	qArray := questions.getQuestions().Questions

	buttons := make([][]tgbotapi.KeyboardButton, len(qArray[questionNumber].Answers))
	for i, a := range qArray[questionNumber].Answers {
		buttons[i] = tgbotapi.NewKeyboardButtonRow(tgbotapi.NewKeyboardButton(a))
	}

	msg := tgbotapi.NewMessage(chatID, "")
	msg.Text = qArray[questionNumber].QuestionText
	msg.ReplyMarkup = tgbotapi.NewReplyKeyboard(buttons...)

	return msg
}

func makeBot() *tgbotapi.BotAPI {
	bot, err := tgbotapi.NewBotAPI(telegramToken)
	if err != nil {
		log.Panic(err)
	}

	bot.Debug = false

	log.Printf("Authorized on account %s", bot.Self.UserName)

	return bot
}

func main() {

	var knownUsers map[int64]userProfile
	var currentUser userProfile

	bot := makeBot()

	ucfg := tgbotapi.NewUpdate(0)
	ucfg.Timeout = 60
	updates, err := bot.GetUpdatesChan(ucfg)
	if err != nil {
		log.Panic(err)
	}

	for update := range updates {
		if update.Message == nil {
			continue
		}

		log.Printf("From: [%s] Message is: %s", update.Message.From.UserName, update.Message.Text)

		if currentUser.ChatID == 0 {
			currentUser = userProfile{0, update.Message.Chat.ID, false, 0, ""}
		} else {
			currentUser.ChatID = update.Message.Chat.ID
		}

		if knownUsers == nil {
			knownUsers = make(map[int64]userProfile)
		}
		if knownUsers[update.Message.Chat.ID].ChatID == 0 {
			knownUsers[update.Message.Chat.ID] = currentUser
		}

		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "")

		if update.Message.IsCommand() {
			if update.Message.Command() == "start" {
				msg.Text = "üå¥ –ü—Ä–∏–≤–µ—Ç! –ú—ã —à–∫–æ–ª–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ English Island!\n\nüî• –° –Ω–∞–º–∏ —Ç—ã –∑–∞–≥–æ–≤–æ—Ä–∏—à—å –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —É–∂–µ —Å –ø–µ—Ä–≤–æ–≥–æ –∑–∞–Ω—è—Ç–∏—è –∫–æ—Ç–æ—Ä–æ–µ —Ç—ã –º–æ–∂–µ—à—å –ø–æ—Å–µ—Ç–∏—Ç—å —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ!\n\n–•–æ—á–µ—à—å –ø—Ä–∏–π—Ç–∏ –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —É—Ä–æ–∫?"
				msg.ReplyMarkup = startKeyboard
				if _, err := bot.Send(msg); err != nil {
					log.Panic(err)
				}
			}
		}

		if update.Message.Text == "üòç –î–∞, —Å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º" {
			msg.Text = "üî• –ü—Ä–µ–∂–¥–µ, —á–µ–º –º—ã –∑–∞–ø–∏—à–µ–º —Ç–µ–±—è –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø—Ä–æ–±–Ω—ã–π —É—Ä–æ–∫, –º—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–≤–æ–µ–≥–æ —É—Ä–æ–≤–Ω—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ! üî•\n\n–≠—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –∏–∑—É—á–µ–Ω–∏–µ —è–∑—ã–∫–∞ –±—ã–ª–æ –ª–µ–≥–∫–∏–º –∏ –∫–æ–º—Ñ–æ—Ä—Ç–Ω—ã–º –¥–ª—è —Ç–µ–±—è.\n\n–¢–µ—Å—Ç –∑–∞–π–º–µ—Ç –Ω–µ –±–æ–ª–µ–µ 10—Ç–∏ –º–∏–Ω—É—Ç\n–¢—ã –≥–æ—Ç–æ–≤ –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç?"
			msg.ReplyMarkup = startTestKeyboard
			if _, err := bot.Send(msg); err != nil {
				log.Panic(err)
			}
		} else if update.Message.Text == "üôÑ –•–æ—á—É —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ —à–∫–æ–ª–µ" {
			msg.Text = "–®–∫–æ–ª–∞ –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã—Ö —è–∑—ã–∫–æ–≤\n\nüå¥English Islandüå¥\n\nüî•–≠—Ç–æ —É—é—Ç–Ω–∞—è –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞, —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∏ —É—Ä–æ–∫–∏ —Å –Ω–æ—Å–∏—Ç–µ–ª—è–º–∏ —è–∑—ã–∫–∞.\n\nüî•–ó–∞–±—É–¥—å—Ç–µ –æ –Ω—É–¥–Ω–æ–π –∑—É–±—Ä–µ–∂–∫–µ –∏ —Å–∫—É—á–Ω—ã—Ö –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏—è—Ö.\n\nüî•–ü—Ä–∏—Ö–æ–¥–∏ –∫ –Ω–∞–º –≤\nüå¥English Island Schoolüå¥\n–ò –ø–æ–ª—É—á–∏ –æ–ø—ã—Ç –∂–∏–≤–æ–≥–æ —è–∑—ã–∫–∞, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≥–æ–≤–æ—Ä—è—Ç."
			if _, err := bot.Send(msg); err != nil {
				log.Panic(err)
			}
		} else if update.Message.Text == "üòç –î–∞, –¥–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º —Ç–µ—Å—Ç!" {
			user := knownUsers[update.Message.Chat.ID]
			if user.inTest == false {
				user.inTest = true
				user.Points = 0 //If test completed several times
			}
			qMsg := getQuestion(user.ChatID, user.currentQuestion)

			if _, err := bot.Send(qMsg); err != nil {
				log.Panic(err)
			}

			user.currentQuestion++
			knownUsers[update.Message.Chat.ID] = user

		} else if update.Message.Contact != nil {
			msgToSchool := tgbotapi.NewMessage(418634811, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å "+update.Message.Contact.FirstName+" –ø—Ä–æ—à–µ–ª —Ç–µ—Å—Ç –∏ –ø—Ä–∏—Å–ª–∞–ª –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:"+update.Message.Contact.PhoneNumber+"\n–ï–≥–æ —É—Ä–æ–≤–µ–Ω—å –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º —Ç–µ—Å—Ç–∞: "+knownUsers[update.Message.Chat.ID].levelAfterTest)
			msg.Text = "–°–ø–∞—Å–∏–±–æ, –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å —Ç–æ–±–æ–π –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è. –î–æ –≤—Å—Ç—Ä–µ—á–∏ –≤ English Island School.üî• \n P.S. –Ω–∞–∂–º–∏ /start –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ"
			if _, err := bot.Send(msg); err != nil {
				log.Panic(err)
			}
			if _, err := bot.Send(msgToSchool); err != nil {
				log.Panic(err)
			}
		} else {
			user := knownUsers[update.Message.Chat.ID]
			if user.inTest == false {
				//Exit when user not in test
				continue
			}
			var questions questionsGroup
			qArray := questions.getQuestions().Questions
			numOfQuestions := len(qArray)

			if user.currentQuestion < numOfQuestions {
				question := qArray[user.currentQuestion-1] //Because we are reading answers of the previous question
				if question.RightAnswer == update.Message.Text {
					user.Points += question.Points
				}

				qMsg := getQuestion(user.ChatID, user.currentQuestion)
				if _, err := bot.Send(qMsg); err != nil {
					log.Panic(err)
				}
				user.currentQuestion++
				knownUsers[update.Message.Chat.ID] = user
			} else {
				var level string
				if user.Points < 20 {
					level = "Elementary"
				} else if user.Points >= 20 && user.Points < 45 {
					level = "Intermediate"
				} else if user.Points >= 45 {
					level = "Upper Intermediate"
				}
				user.levelAfterTest = level
				user.inTest = false
				knownUsers[update.Message.Chat.ID] = user
				msg.ReplyMarkup = endKeyboard
				msg.Text = "–¢–≤–æ–π —É—Ä–æ–≤–µ–Ω—å —è–∑—ã–∫–∞: " + level + "\n\n–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Ç–µ–±—è, —Ç—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–µ–ª —Ç–µ—Å—Ç –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è —è–∑—ã–∫–∞üî•\n\n –î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ –∑–∞–ø–∏—Å–∞—Ç—å —Ç–µ–±—è –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —É—Ä–æ–∫, —Ç–µ–±–µ –Ω–∞–¥–æ –æ—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ üå¥"
				if _, err := bot.Send(msg); err != nil {
					log.Panic(err)
				}
			}

		}
	}
}
