package main

import (
	"fmt"
	"log"
	"os"
	"strconv"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api"
	"gopkg.in/yaml.v2"
)

// Config represents the configuration of the bot.
type Config struct {
	TelegramToken string
	AdminChatID   int64
	QuestionsFile string
}

// BotWrapper encapsulates bot functionality and state.
type BotWrapper struct {
	Bot         *tgbotapi.BotAPI
	KnownUsers  map[int64]userProfile
	AdminChatID int64
	Questions   []question
}

// userProfile represents information about a user's session.
type userProfile struct {
	Points          int
	ChatID          int64
	InTest          bool
	CurrentQuestion int
	LevelAfterTest  string
}

// question represents a single question in the test.
type question struct {
	QuestionText string   `yaml:"QuestionText"`
	Answers      []string `yaml:"Answers"`
	RightAnswer  string   `yaml:"RightAnswer"`
	Points       int      `yaml:"Points"`
}

// questionsGroup represents a collection of questions parsed from YAML.
type questionsGroup struct {
	Questions []question `yaml:"Questions"`
}

const (
	// Messages
	welcomeMessage = "üå¥ –ü—Ä–∏–≤–µ—Ç! –ú—ã —à–∫–æ–ª–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ English Island!\n\nüî• –° –Ω–∞–º–∏ —Ç—ã –∑–∞–≥–æ–≤–æ—Ä–∏—à—å –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —É–∂–µ —Å –ø–µ—Ä–≤–æ–≥–æ –∑–∞–Ω—è—Ç–∏—è, –∫–æ—Ç–æ—Ä–æ–µ —Ç—ã –º–æ–∂–µ—à—å –ø–æ—Å–µ—Ç–∏—Ç—å —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ!\n\n–•–æ—á–µ—à—å –ø—Ä–∏–π—Ç–∏ –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —É—Ä–æ–∫?"
	testIntro      = "üî• –ü—Ä–µ–∂–¥–µ, —á–µ–º –º—ã –∑–∞–ø–∏—à–µ–º —Ç–µ–±—è –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø—Ä–æ–±–Ω—ã–π —É—Ä–æ–∫, –º—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–≤–æ–µ–≥–æ —É—Ä–æ–≤–Ω—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ! üî•\n\n–≠—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –∏–∑—É—á–µ–Ω–∏–µ —è–∑—ã–∫–∞ –±—ã–ª–æ –ª–µ–≥–∫–∏–º –∏ –∫–æ–º—Ñ–æ—Ä—Ç–Ω—ã–º –¥–ª—è —Ç–µ–±—è.\n\n–¢–µ—Å—Ç –∑–∞–π–º–µ—Ç –Ω–µ –±–æ–ª–µ–µ 10 –º–∏–Ω—É—Ç.\n–¢—ã –≥–æ—Ç–æ–≤ –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç?"
	schoolInfo     = "–®–∫–æ–ª–∞ –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã—Ö —è–∑—ã–∫–æ–≤\n\nüå¥English Islandüå¥\n\nüî• –≠—Ç–æ —É—é—Ç–Ω–∞—è –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞, —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∏ —É—Ä–æ–∫–∏ —Å –Ω–æ—Å–∏—Ç–µ–ª—è–º–∏ —è–∑—ã–∫–∞.\n\nüî• –ó–∞–±—É–¥—å—Ç–µ –æ –Ω—É–¥–Ω–æ–π –∑—É–±—Ä–µ–∂–∫–µ –∏ —Å–∫—É—á–Ω—ã—Ö –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏—è—Ö.\n\nüî• –ü—Ä–∏—Ö–æ–¥–∏ –∫ –Ω–∞–º –≤\nüå¥English Island Schoolüå¥\n–ò –ø–æ–ª—É—á–∏ –æ–ø—ã—Ç –∂–∏–≤–æ–≥–æ —è–∑—ã–∫–∞, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≥–æ–≤–æ—Ä—è—Ç."
	thankYou       = "–°–ø–∞—Å–∏–±–æ, –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å —Ç–æ–±–æ–π –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è. –î–æ –≤—Å—Ç—Ä–µ—á–∏ –≤ English Island School.üî• \nP.S. –Ω–∞–∂–º–∏ /start –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ."
)

// loadConfig loads the configuration from environment variables.
func loadConfig() Config {
	adminChatID, err := strconv.ParseInt(os.Getenv("ADMIN_CHAT_ID"), 10, 64)
	if err != nil {
		log.Panicf("Invalid ADMIN_CHAT_ID: %v", err)
	}

	return Config{
		TelegramToken: os.Getenv("TELETOKEN"),
		AdminChatID:   adminChatID,
		QuestionsFile: "questions.yml",
	}
}

// loadQuestions reads questions from the YAML file.
func loadQuestions(filePath string) ([]question, error) {
	yamlFile, err := os.ReadFile(filePath)
	if err != nil {
		return nil, fmt.Errorf("failed to read YAML file: %w", err)
	}

	var group questionsGroup
	if err = yaml.Unmarshal(yamlFile, &group); err != nil {
		return nil, fmt.Errorf("failed to unmarshal YAML: %w", err)
	}

	return group.Questions, nil
}

// NewBotWrapper initializes a new BotWrapper.
func NewBotWrapper(config Config) *BotWrapper {
	bot, err := tgbotapi.NewBotAPI(config.TelegramToken)
	if err != nil {
		log.Panicf("Failed to initialize bot: %v", err)
	}
	log.Printf("Authorized on account %s", bot.Self.UserName)

	questions, err := loadQuestions(config.QuestionsFile)
	if err != nil {
		log.Panicf("Failed to load questions: %v", err)
	}

	return &BotWrapper{
		Bot:         bot,
		KnownUsers:  make(map[int64]userProfile),
		AdminChatID: config.AdminChatID,
		Questions:   questions,
	}
}

// getUserProfile retrieves or creates a user profile.
func (wrapper *BotWrapper) getUserProfile(chatID int64) userProfile {
	user, exists := wrapper.KnownUsers[chatID]
	if !exists {
		user = userProfile{ChatID: chatID}
		wrapper.KnownUsers[chatID] = user
	}
	return user
}

// makeStartKeyboard dynamically creates the start keyboard.
func makeStartKeyboard() tgbotapi.ReplyKeyboardMarkup {
	return tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üòç –î–∞, —Å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º"),
			tgbotapi.NewKeyboardButton("üôÑ –•–æ—á—É —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ —à–∫–æ–ª–µ"),
		),
	)
}

// makeStartTestKeyboard dynamically creates the test start keyboard.
func makeStartTestKeyboard() tgbotapi.ReplyKeyboardMarkup {
	return tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üòç –î–∞, –¥–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º —Ç–µ—Å—Ç!"),
			tgbotapi.NewKeyboardButton("üôÑ –•–æ—á—É —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ —à–∫–æ–ª–µ"),
		),
	)
}

// makeContactKeyboard dynamically creates the contact sharing keyboard.
func makeContactKeyboard() tgbotapi.ReplyKeyboardMarkup {
	return tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButtonContact("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"),
		),
	)
}

// getQuestion formats a question into a Telegram message.
func getQuestion(chatID int64, question question) tgbotapi.MessageConfig {
	buttons := make([][]tgbotapi.KeyboardButton, len(question.Answers))
	for i, answer := range question.Answers {
		buttons[i] = tgbotapi.NewKeyboardButtonRow(tgbotapi.NewKeyboardButton(answer))
	}

	msg := tgbotapi.NewMessage(chatID, question.QuestionText)
	msg.ReplyMarkup = tgbotapi.NewReplyKeyboard(buttons...)
	return msg
}

// determineLevel calculates the user's English level based on points.
func determineLevel(points int) string {
	switch {
	case points < 20:
		return "Elementary"
	case points < 45:
		return "Intermediate"
	default:
		return "Upper Intermediate"
	}
}

// handleMessage processes a Telegram update.
func (wrapper *BotWrapper) handleMessage(update tgbotapi.Update) {
	if update.Message.IsCommand() {
		wrapper.handleCommand(update.Message)
		return
	}

	if update.Message.Contact != nil {
		wrapper.handleContact(update.Message)
		return
	}

	wrapper.handleConversation(update.Message)
}

// handleCommand handles user commands.
func (wrapper *BotWrapper) handleCommand(msg *tgbotapi.Message) {
	switch msg.Command() {
	case "start":
		wrapper.sendMessage(msg.Chat.ID, welcomeMessage, makeStartKeyboard())
	}
}

// handleContact handles contact sharing.
func (wrapper *BotWrapper) handleContact(msg *tgbotapi.Message) {
	user := wrapper.KnownUsers[msg.Chat.ID]
	msgToSchool := fmt.Sprintf(
		"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –ø—Ä–æ—à–µ–ª —Ç–µ—Å—Ç –∏ –ø—Ä–∏—Å–ª–∞–ª –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: %s.\n–£—Ä–æ–≤–µ–Ω—å: %s",
		msg.Contact.FirstName, msg.Contact.PhoneNumber, user.LevelAfterTest,
	)

	wrapper.sendMessage(msg.Chat.ID, thankYou, nil)
	wrapper.sendMessage(wrapper.AdminChatID, msgToSchool, nil)
}

// handleConversation processes normal conversation messages.
func (wrapper *BotWrapper) handleConversation(msg *tgbotapi.Message) {
	user := wrapper.getUserProfile(msg.Chat.ID)

	switch msg.Text {
	case "üòç –î–∞, —Å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º":
		wrapper.sendMessage(msg.Chat.ID, testIntro, makeStartTestKeyboard())

	case "üôÑ –•–æ—á—É —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ —à–∫–æ–ª–µ":
		wrapper.sendMessage(msg.Chat.ID, schoolInfo, nil)

	case "üòç –î–∞, –¥–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º —Ç–µ—Å—Ç!":
		user.InTest = true
		user.Points = 0
		user.CurrentQuestion = 0
		qMsg := getQuestion(user.ChatID, wrapper.Questions[user.CurrentQuestion])
		wrapper.sendMessageStruct(qMsg)
	default:
		if user.InTest {
			wrapper.handleTest(msg, &user)
		}
	}
	wrapper.KnownUsers[msg.Chat.ID] = user
}

// handleTest processes test-related messages.
func (wrapper *BotWrapper) handleTest(msg *tgbotapi.Message, user *userProfile) {
	if user.CurrentQuestion < len(wrapper.Questions) {
		question := wrapper.Questions[user.CurrentQuestion]
		if question.RightAnswer == msg.Text {
			user.Points += question.Points
		}
		user.CurrentQuestion++
	}

	if user.CurrentQuestion == len(wrapper.Questions) {
		user.InTest = false
		user.LevelAfterTest = determineLevel(user.Points)
		wrapper.sendMessage(msg.Chat.ID, "–¢–≤–æ–π —É—Ä–æ–≤–µ–Ω—å —è–∑—ã–∫–∞: "+user.LevelAfterTest+"\n\n–û—Å—Ç–∞–≤—å —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —É—Ä–æ–∫ üå¥", makeContactKeyboard())
	} else {
		qMsg := getQuestion(user.ChatID, wrapper.Questions[user.CurrentQuestion])
		wrapper.sendMessageStruct(qMsg)
	}
}

// sendMessage sends a message to a user.
func (wrapper *BotWrapper) sendMessage(chatID int64, text string, keyboard interface{}) {
	msg := tgbotapi.NewMessage(chatID, text)
	msg.ReplyMarkup = keyboard
	if _, err := wrapper.Bot.Send(msg); err != nil {
		log.Printf("Failed to send message: %v", err)
	}
}

// sendMessageStruct sends a fully constructed message.
func (wrapper *BotWrapper) sendMessageStruct(msg tgbotapi.MessageConfig) {
	if _, err := wrapper.Bot.Send(msg); err != nil {
		log.Printf("Failed to send message: %v", err)
	}
}

// Main starts the bot and listens to updates.
func main() {
	config := loadConfig()
	botWrapper := NewBotWrapper(config)

	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60
	updates, err := botWrapper.Bot.GetUpdatesChan(u)
	if err != nil {
		log.Fatalf("Failed to initialize updates channel: %v", err)
	}

	for update := range updates {
		if update.Message == nil {
			continue
		}
		botWrapper.handleMessage(update)
	}
}
