package main

import (
	"log"

	"io/ioutil"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api"
	"gopkg.in/yaml.v2"
)

var buttonTouch bool = false
var userPoint int = 0

var startKeyboard = tgbotapi.NewReplyKeyboard(
	tgbotapi.NewKeyboardButtonRow(
		tgbotapi.NewKeyboardButton("üòç –î–∞, —Å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º"),
		tgbotapi.NewKeyboardButton("üôÑ –•–æ—á—É —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ —à–∫–æ–ª–µ"),
	),
)

//question struct using for questions in english level test
type question struct {
	QuestionText string   `yaml:"QuestionText"`
	Answers      []string `yaml:"Answers"`
	RightAnswer  string   `yaml:"RightAnswer"`
	Points       int      `yaml:"Points"`
}

//questionGroup struct contains array of questions
type questionGroup struct {
	Questions []question `yaml:"Questions"`
}

//getQuestions method for import questions
func (q *questionGroup) getQuestions() *questionGroup {
	yamlFile, err := ioutil.ReadFile("questions.yml")
	if err != nil {
		log.Printf("yamlFile.Get err  #%v ", err)
	}
	err = yaml.Unmarshal(yamlFile, q)
	if err != nil {
		log.Fatalf("Unmarshal: %v", err)
	}
	return q
}

//getQuestion function gets question by uts number and makes reply keyboard with answers
func getQuestion(msg *tgbotapi.MessageConfig, questionNumber int) {
	var questions questionGroup

	qArray := questions.getQuestions().Questions

	buttons := make([][]tgbotapi.KeyboardButton, len(qArray[questionNumber].Answers))
	for i, a := range qArray[questionNumber].Answers {
		buttons[i] = tgbotapi.NewKeyboardButtonRow(tgbotapi.NewKeyboardButton(a))
	}

	msg.Text = qArray[questionNumber].QuestionText
	msg.ReplyMarkup = tgbotapi.NewReplyKeyboard(buttons...)
}

func main() {

	bot, err := tgbotapi.NewBotAPI("1601846360:AAHPRgAazXY-bX-fZI5NAh0ffUWGbPmH0-I")
	if err != nil {
		log.Panic(err)
	}

	bot.Debug = true

	log.Printf("Authorized on account %s", bot.Self.UserName)

	ucfg := tgbotapi.NewUpdate(0)
	ucfg.Timeout = 60
	updates, err := bot.GetUpdatesChan(ucfg)

	for update := range updates {
		if update.Message == nil {
			continue
		}

		log.Printf("[%s] %s", update.Message.From.UserName, update.Message.Text)

		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "")

		switch update.Message.Command() {
		case "start":
			msg.Text = "üå¥ –ü—Ä–∏–≤–µ—Ç! –ú—ã —à–∫–æ–ª–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ English Island!\n\nüî• –° –Ω–∞–º–∏ —Ç—ã –∑–∞–≥–æ–≤–æ—Ä–∏—à—å –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —É–∂–µ —Å –ø–µ—Ä–≤–æ–≥–æ –∑–∞–Ω—è—Ç–∏—è –∫–æ—Ç–æ—Ä–æ–µ —Ç—ã –º–æ–∂–µ—à—å –ø–æ—Å–µ—Ç–∏—Ç—å —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ!\n\n–•–æ—á–µ—à—å –ø—Ä–∏–π—Ç–∏ –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —É—Ä–æ–∫?"
			msg.ReplyMarkup = startKeyboard
		default:
			msg.Text = "–ù–∞–ø–∏—à–∏ /start –∏–ª–∏ –Ω–∞–∂–∏–º–∞–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É."
		}

		switch update.Message.Text {
		case "üòç –î–∞, —Å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º":
			if buttonTouch == false {
				msg.Text = "üî• –ü—Ä–µ–∂–¥–µ, —á–µ–º –º—ã –∑–∞–ø–∏—à–µ–º —Ç–µ–±—è –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø—Ä–æ–±–Ω—ã–π —É—Ä–æ–∫, –º—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–≤–æ–µ–≥–æ —É—Ä–æ–≤–Ω—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ! üî•\n\n–≠—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –∏–∑—É—á–µ–Ω–∏–µ —è–∑—ã–∫–∞ –±—ã–ª–æ –ª–µ–≥–∫–∏–º –∏ –∫–æ–º—Ñ–æ—Ä—Ç–Ω—ã–º –¥–ª—è —Ç–µ–±—è.\n\n–¢–µ—Å—Ç –∑–∞–π–º–µ—Ç –Ω–µ –±–æ–ª–µ–µ 10—Ç–∏ –º–∏–Ω—É—Ç\n–¢—ã –≥–æ—Ç–æ–≤ –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç?"
				buttonTouch = true
			} else {
				getQuestion(&msg, 6)

				buttonTouch = false
			}

		case "üôÑ –•–æ—á—É —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ —à–∫–æ–ª–µ":
			msg.Text = "–®–∫–æ–ª–∞ –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã—Ö —è–∑—ã–∫–æ–≤\n\nüå¥English Islandüå¥\n\nüî•–≠—Ç–æ —É—é—Ç–Ω–∞—è –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞, —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∏ —É—Ä–æ–∫–∏ —Å –Ω–æ—Å–∏—Ç–µ–ª—è–º–∏ —è–∑—ã–∫–∞.\n\nüî•–ó–∞–±—É–¥—å—Ç–µ –æ –Ω—É–¥–Ω–æ–π –∑—É–±—Ä–µ–∂–∫–µ –∏ —Å–∫—É—á–Ω—ã—Ö –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏—è—Ö.\n\nüî•–ü—Ä–∏—Ö–æ–¥–∏ –∫ –Ω–∞–º –≤\nüå¥English Island Schoolüå¥\n–ò –ø–æ–ª—É—á–∏ –æ–ø—ã—Ç –∂–∏–≤–æ–≥–æ —è–∑—ã–∫–∞, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≥–æ–≤–æ—Ä—è—Ç."
		}

		if _, err := bot.Send(msg); err != nil {
			log.Panic(err)
		}
	}
}
